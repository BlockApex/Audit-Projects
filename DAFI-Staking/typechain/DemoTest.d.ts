/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DemoTestInterface extends ethers.utils.Interface {
  functions: {
    "echo(string,string)": FunctionFragment;
    "prove_this(uint256)": FunctionFragment;
    "test_asserts()": FunctionFragment;
    "test_events()": FunctionFragment;
    "test_logn()": FunctionFragment;
    "test_logs()": FunctionFragment;
    "test_multiline()": FunctionFragment;
    "test_old_logs()": FunctionFragment;
    "test_this()": FunctionFragment;
    "test_trace()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "echo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "prove_this",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_asserts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_events",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "test_logn", values?: undefined): string;
  encodeFunctionData(functionFragment: "test_logs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_multiline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_old_logs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "test_this", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "test_trace",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "echo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prove_this", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_asserts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_events",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_logn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_logs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_multiline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_old_logs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_this", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_trace", data: BytesLike): Result;

  events: {
    "MyEvent(uint256,uint256,uint256,uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_old_named_uint(bytes32,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "log_uint_array(uint256[4])": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MyEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_old_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint_array"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export class DemoTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DemoTestInterface;

  functions: {
    echo(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    prove_this(
      x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_asserts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_events(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_logn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_multiline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_old_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_this(overrides?: CallOverrides): Promise<[void]>;

    test_trace(overrides?: CallOverrides): Promise<[void]>;
  };

  echo(
    s1: string,
    s2: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  prove_this(
    x: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_asserts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_events(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_logn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_logs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_multiline(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_old_logs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_this(overrides?: CallOverrides): Promise<void>;

  test_trace(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    echo(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    prove_this(x: BigNumberish, overrides?: CallOverrides): Promise<void>;

    test_asserts(overrides?: CallOverrides): Promise<void>;

    test_events(overrides?: CallOverrides): Promise<void>;

    test_logn(overrides?: CallOverrides): Promise<void>;

    test_logs(overrides?: CallOverrides): Promise<void>;

    test_multiline(overrides?: CallOverrides): Promise<void>;

    test_old_logs(overrides?: CallOverrides): Promise<void>;

    test_this(overrides?: CallOverrides): Promise<void>;

    test_trace(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    MyEvent(
      undefined?: null,
      undefined?: BigNumberish | null,
      undefined?: null,
      undefined?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      { arg0: BigNumber; arg1: BigNumber; arg2: BigNumber; arg3: BigNumber }
    >;

    log(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_address(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_bytes(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_bytes32(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_int(
      undefined?: null
    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;

    log_named_address(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes32(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_int(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_string(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_uint(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_old_named_uint(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, BigNumber], { arg0: string; arg1: BigNumber }>;

    log_string(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_uint(
      undefined?: null
    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;

    log_uint_array(
      val?: null
    ): TypedEventFilter<
      [[BigNumber, BigNumber, BigNumber, BigNumber]],
      { val: [BigNumber, BigNumber, BigNumber, BigNumber] }
    >;

    logs(undefined?: null): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    echo(s1: string, s2: string, overrides?: CallOverrides): Promise<BigNumber>;

    prove_this(
      x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_asserts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_events(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_logn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_multiline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_old_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_this(overrides?: CallOverrides): Promise<BigNumber>;

    test_trace(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    echo(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prove_this(
      x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_asserts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_events(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_logn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_multiline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_old_logs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_this(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_trace(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
