/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SetupContractsInterface extends ethers.utils.Interface {
  functions: {
    "database()": FunctionFragment;
    "distPool()": FunctionFragment;
    "getAddr()": FunctionFragment;
    "networkDemand()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "rebaseEngine()": FunctionFragment;
    "stakingManager()": FunctionFragment;
    "tvlFeed()": FunctionFragment;
    "wrapClaim(bool,uint256)": FunctionFragment;
    "wrapGetWeights()": FunctionFragment;
    "wrapRebasePool()": FunctionFragment;
    "wrapSetStakingParams(uint256,uint256,uint32)": FunctionFragment;
    "wrapStake(uint256)": FunctionFragment;
    "wrapUnstake(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "database", values?: undefined): string;
  encodeFunctionData(functionFragment: "distPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "networkDemand",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tvlFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapClaim",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapGetWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapRebasePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapSetStakingParams",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapUnstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "database", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvlFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapGetWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapRebasePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapSetStakingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapUnstake",
    data: BytesLike
  ): Result;

  events: {};
}

export class SetupContracts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SetupContractsInterface;

  functions: {
    database(overrides?: CallOverrides): Promise<[string]>;

    distPool(overrides?: CallOverrides): Promise<[string]>;

    getAddr(overrides?: CallOverrides): Promise<[string]>;

    networkDemand(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    rebaseEngine(overrides?: CallOverrides): Promise<[string]>;

    stakingManager(overrides?: CallOverrides): Promise<[string]>;

    tvlFeed(overrides?: CallOverrides): Promise<[string]>;

    wrapClaim(
      partialClaim: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapGetWeights(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currPW: BigNumber;
        currFW: BigNumber;
        accPW: BigNumber;
        accFW: BigNumber;
      }
    >;

    wrapRebasePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapSetStakingParams(
      _ms: BigNumberish,
      _md: BigNumberish,
      _pd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  database(overrides?: CallOverrides): Promise<string>;

  distPool(overrides?: CallOverrides): Promise<string>;

  getAddr(overrides?: CallOverrides): Promise<string>;

  networkDemand(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  rebaseEngine(overrides?: CallOverrides): Promise<string>;

  stakingManager(overrides?: CallOverrides): Promise<string>;

  tvlFeed(overrides?: CallOverrides): Promise<string>;

  wrapClaim(
    partialClaim: boolean,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapGetWeights(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      currPW: BigNumber;
      currFW: BigNumber;
      accPW: BigNumber;
      accFW: BigNumber;
    }
  >;

  wrapRebasePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapSetStakingParams(
    _ms: BigNumberish,
    _md: BigNumberish,
    _pd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapUnstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    database(overrides?: CallOverrides): Promise<string>;

    distPool(overrides?: CallOverrides): Promise<string>;

    getAddr(overrides?: CallOverrides): Promise<string>;

    networkDemand(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    rebaseEngine(overrides?: CallOverrides): Promise<string>;

    stakingManager(overrides?: CallOverrides): Promise<string>;

    tvlFeed(overrides?: CallOverrides): Promise<string>;

    wrapClaim(
      partialClaim: boolean,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapGetWeights(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currPW: BigNumber;
        currFW: BigNumber;
        accPW: BigNumber;
        accFW: BigNumber;
      }
    >;

    wrapRebasePool(overrides?: CallOverrides): Promise<void>;

    wrapSetStakingParams(
      _ms: BigNumberish,
      _md: BigNumberish,
      _pd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapStake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    wrapUnstake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    database(overrides?: CallOverrides): Promise<BigNumber>;

    distPool(overrides?: CallOverrides): Promise<BigNumber>;

    getAddr(overrides?: CallOverrides): Promise<BigNumber>;

    networkDemand(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseEngine(overrides?: CallOverrides): Promise<BigNumber>;

    stakingManager(overrides?: CallOverrides): Promise<BigNumber>;

    tvlFeed(overrides?: CallOverrides): Promise<BigNumber>;

    wrapClaim(
      partialClaim: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapGetWeights(overrides?: CallOverrides): Promise<BigNumber>;

    wrapRebasePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapSetStakingParams(
      _ms: BigNumberish,
      _md: BigNumberish,
      _pd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    database(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkDemand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tvlFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapClaim(
      partialClaim: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapGetWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapRebasePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapSetStakingParams(
      _ms: BigNumberish,
      _md: BigNumberish,
      _pd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
