/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingDatabaseInterface extends ethers.utils.Interface {
  functions: {
    "addAccumulatedPoolWeight(uint256)": FunctionFragment;
    "addDemandFactor(uint256,uint256)": FunctionFragment;
    "addPoolTotalStaked(uint256)": FunctionFragment;
    "addStake(address,uint256)": FunctionFragment;
    "addToFeesDeposited(uint256)": FunctionFragment;
    "addTodDAFIBurned(uint256)": FunctionFragment;
    "addWhitelist(address)": FunctionFragment;
    "demandFactorHistory(uint256)": FunctionFragment;
    "getAccumulatedPoolWeight()": FunctionFragment;
    "getDemandFactor(uint256)": FunctionFragment;
    "getDemandFactorLastest()": FunctionFragment;
    "getDistributePerSecond()": FunctionFragment;
    "getFeesDeposited()": FunctionFragment;
    "getMaxDAFI()": FunctionFragment;
    "getMinimumStakeAmount()": FunctionFragment;
    "getMinimumStakePeriod()": FunctionFragment;
    "getPool()": FunctionFragment;
    "getPoolLastUpdatedOn()": FunctionFragment;
    "getProgramDuration()": FunctionFragment;
    "getProgramEndedAt()": FunctionFragment;
    "getRewardFee()": FunctionFragment;
    "getStakingStartTime()": FunctionFragment;
    "getTotalStaked()": FunctionFragment;
    "getUserCount()": FunctionFragment;
    "getUserStake(address)": FunctionFragment;
    "getdDAFIBurned()": FunctionFragment;
    "getdDAFIDistributed()": FunctionFragment;
    "isProgramEnded()": FunctionFragment;
    "markProgramEnded()": FunctionFragment;
    "markRewardsClaimed(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDistributePerSecond(uint256)": FunctionFragment;
    "setMaxDAFI(uint256)": FunctionFragment;
    "setMinimumStakeAmount(uint256)": FunctionFragment;
    "setMinimumStakePeriod(uint256)": FunctionFragment;
    "setProgramDuration(uint256)": FunctionFragment;
    "setRewardFee(uint8)": FunctionFragment;
    "setStakingParams(uint256,uint256,uint256,uint8,uint256)": FunctionFragment;
    "setStakingStartTime()": FunctionFragment;
    "setdDAFIDistributed(uint256)": FunctionFragment;
    "subPoolTotalStaked(uint256)": FunctionFragment;
    "totalStakedFor(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStakeAmount(address,uint256)": FunctionFragment;
    "updateUserStake(address,uint256,uint256,uint256)": FunctionFragment;
    "userExists(address)": FunctionFragment;
    "userStakes(address)": FunctionFragment;
    "whitelists(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAccumulatedPoolWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDemandFactor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToFeesDeposited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTodDAFIBurned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "demandFactorHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedPoolWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDemandFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDemandFactorLastest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributePerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDAFI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStakePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolLastUpdatedOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramEndedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getdDAFIBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getdDAFIDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProgramEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markProgramEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markRewardsClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributePerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDAFI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStakePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProgramDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setdDAFIDistributed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subPoolTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserStake",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userExists", values: [string]): string;
  encodeFunctionData(functionFragment: "userStakes", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelists", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addAccumulatedPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDemandFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToFeesDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTodDAFIBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "demandFactorHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDemandFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDemandFactorLastest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxDAFI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStakePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLastUpdatedOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgramDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgramEndedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getdDAFIBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getdDAFIDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProgramEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markProgramEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxDAFI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStakePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProgramDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setdDAFIDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subPoolTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelists", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class StakingDatabase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingDatabaseInterface;

  functions: {
    addAccumulatedPoolWeight(
      _currentWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDemandFactor(
      _value: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoolTotalStaked(
      amountToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToFeesDeposited(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTodDAFIBurned(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    demandFactorHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    getAccumulatedPoolWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDemandFactor(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }]
    >;

    getDemandFactorLastest(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }]
    >;

    getDistributePerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeesDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxDAFI(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinimumStakePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPool(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          currentAccumulatedWeight: BigNumber;
          totalStaked: BigNumber;
          lastUpdatedOn: BigNumber;
          lastDemandFactor: BigNumber;
          currentPoolWeight: BigNumber;
        }
      ]
    >;

    getPoolLastUpdatedOn(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProgramDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProgramEndedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardFee(overrides?: CallOverrides): Promise<[number]>;

    getStakingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber;
          createdOn: BigNumber;
          lastUpdatedOn: BigNumber;
          lastStakingAccumulatedWeight: BigNumber;
          totalUnclaimed: BigNumber;
          lastDemandFactor: BigNumber;
        }
      ]
    >;

    getdDAFIBurned(overrides?: CallOverrides): Promise<[BigNumber]>;

    getdDAFIDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    isProgramEnded(overrides?: CallOverrides): Promise<[boolean]>;

    markProgramEnded(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markRewardsClaimed(
      user: string,
      rewardsBeingClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributePerSecond(
      _distributePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDAFI(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumStakePeriod(
      _minimumStakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProgramDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardFee(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingParams(
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingStartTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setdDAFIDistributed(
      _distributed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subPoolTotalStaked(
      amountToSub: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStakeAmount(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserStake(
      user: string,
      newReward: BigNumberish,
      lastDemandFactor: BigNumberish,
      currentAccumulatedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userExists(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        createdOn: BigNumber;
        lastUpdatedOn: BigNumber;
        lastStakingAccumulatedWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addAccumulatedPoolWeight(
    _currentWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDemandFactor(
    _value: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoolTotalStaked(
    amountToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStake(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToFeesDeposited(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTodDAFIBurned(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  demandFactorHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
  >;

  getAccumulatedPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getDemandFactor(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
  >;

  getDemandFactorLastest(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
  >;

  getDistributePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  getFeesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxDAFI(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      currentAccumulatedWeight: BigNumber;
      totalStaked: BigNumber;
      lastUpdatedOn: BigNumber;
      lastDemandFactor: BigNumber;
      currentPoolWeight: BigNumber;
    }
  >;

  getPoolLastUpdatedOn(overrides?: CallOverrides): Promise<BigNumber>;

  getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getProgramEndedAt(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardFee(overrides?: CallOverrides): Promise<number>;

  getStakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

  getUserStake(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      createdOn: BigNumber;
      lastUpdatedOn: BigNumber;
      lastStakingAccumulatedWeight: BigNumber;
      totalUnclaimed: BigNumber;
      lastDemandFactor: BigNumber;
    }
  >;

  getdDAFIBurned(overrides?: CallOverrides): Promise<BigNumber>;

  getdDAFIDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  isProgramEnded(overrides?: CallOverrides): Promise<boolean>;

  markProgramEnded(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markRewardsClaimed(
    user: string,
    rewardsBeingClaimed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeWhitelist(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributePerSecond(
    _distributePerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDAFI(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumStakeAmount(
    _minimumStakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumStakePeriod(
    _minimumStakePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProgramDuration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardFee(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingParams(
    _minimumStakeDays: BigNumberish,
    _minimumStakeAmount: BigNumberish,
    _maxDAFI: BigNumberish,
    _rewardFee: BigNumberish,
    durationInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingStartTime(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setdDAFIDistributed(
    _distributed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subPoolTotalStaked(
    amountToSub: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStakeAmount(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserStake(
    user: string,
    newReward: BigNumberish,
    lastDemandFactor: BigNumberish,
    currentAccumulatedWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userExists(user: string, overrides?: CallOverrides): Promise<boolean>;

  userStakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      createdOn: BigNumber;
      lastUpdatedOn: BigNumber;
      lastStakingAccumulatedWeight: BigNumber;
      totalUnclaimed: BigNumber;
      lastDemandFactor: BigNumber;
    }
  >;

  whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addAccumulatedPoolWeight(
      _currentWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDemandFactor(
      _value: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolTotalStaked(
      amountToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addStake(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToFeesDeposited(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTodDAFIBurned(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelist(account: string, overrides?: CallOverrides): Promise<void>;

    demandFactorHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    getAccumulatedPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getDemandFactor(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    getDemandFactorLastest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    getDistributePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    getFeesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDAFI(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentAccumulatedWeight: BigNumber;
        totalStaked: BigNumber;
        lastUpdatedOn: BigNumber;
        lastDemandFactor: BigNumber;
        currentPoolWeight: BigNumber;
      }
    >;

    getPoolLastUpdatedOn(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramEndedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardFee(overrides?: CallOverrides): Promise<number>;

    getStakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        createdOn: BigNumber;
        lastUpdatedOn: BigNumber;
        lastStakingAccumulatedWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;

    getdDAFIBurned(overrides?: CallOverrides): Promise<BigNumber>;

    getdDAFIDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    isProgramEnded(overrides?: CallOverrides): Promise<boolean>;

    markProgramEnded(overrides?: CallOverrides): Promise<void>;

    markRewardsClaimed(
      user: string,
      rewardsBeingClaimed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeWhitelist(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDistributePerSecond(
      _distributePerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDAFI(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumStakePeriod(
      _minimumStakePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProgramDuration(
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardFee(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingParams(
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingStartTime(overrides?: CallOverrides): Promise<void>;

    setdDAFIDistributed(
      _distributed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subPoolTotalStaked(
      amountToSub: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeAmount(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserStake(
      user: string,
      newReward: BigNumberish,
      lastDemandFactor: BigNumberish,
      currentAccumulatedWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userExists(user: string, overrides?: CallOverrides): Promise<boolean>;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        createdOn: BigNumber;
        lastUpdatedOn: BigNumber;
        lastStakingAccumulatedWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addAccumulatedPoolWeight(
      _currentWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDemandFactor(
      _value: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoolTotalStaked(
      amountToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToFeesDeposited(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTodDAFIBurned(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    demandFactorHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccumulatedPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getDemandFactor(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDemandFactorLastest(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    getFeesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDAFI(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLastUpdatedOn(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getProgramEndedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getdDAFIBurned(overrides?: CallOverrides): Promise<BigNumber>;

    getdDAFIDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    isProgramEnded(overrides?: CallOverrides): Promise<BigNumber>;

    markProgramEnded(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markRewardsClaimed(
      user: string,
      rewardsBeingClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributePerSecond(
      _distributePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDAFI(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumStakePeriod(
      _minimumStakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProgramDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardFee(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingParams(
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingStartTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setdDAFIDistributed(
      _distributed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subPoolTotalStaked(
      amountToSub: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStakeAmount(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserStake(
      user: string,
      newReward: BigNumberish,
      lastDemandFactor: BigNumberish,
      currentAccumulatedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userExists(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccumulatedPoolWeight(
      _currentWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDemandFactor(
      _value: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoolTotalStaked(
      amountToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStake(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToFeesDeposited(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTodDAFIBurned(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    demandFactorHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccumulatedPoolWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDemandFactor(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDemandFactorLastest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributePerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeesDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxDAFI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinimumStakeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumStakePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolLastUpdatedOn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProgramDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProgramEndedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getdDAFIBurned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getdDAFIDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProgramEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markProgramEnded(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markRewardsClaimed(
      user: string,
      rewardsBeingClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelist(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributePerSecond(
      _distributePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDAFI(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStakeAmount(
      _minimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStakePeriod(
      _minimumStakePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProgramDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardFee(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingParams(
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingStartTime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setdDAFIDistributed(
      _distributed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subPoolTotalStaked(
      amountToSub: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStakeAmount(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserStake(
      user: string,
      newReward: BigNumberish,
      lastDemandFactor: BigNumberish,
      currentAccumulatedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userExists(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
