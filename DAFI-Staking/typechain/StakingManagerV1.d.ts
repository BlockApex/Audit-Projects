/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingManagerV1Interface extends ethers.utils.Interface {
  functions: {
    "claimRewards(bool,uint256)": FunctionFragment;
    "disableStaking()": FunctionFragment;
    "disableUnstaking()": FunctionFragment;
    "enableStaking()": FunctionFragment;
    "enableUnstaking()": FunctionFragment;
    "endProgram()": FunctionFragment;
    "extendProgram(uint256,uint256)": FunctionFragment;
    "getProgramDuration()": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint256,uint256,uint8,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardBalance(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "updateDistributionPool(address)": FunctionFragment;
    "updateMaxDAFI(uint256)": FunctionFragment;
    "updateMinimumStakingAmount(uint256)": FunctionFragment;
    "updateMinimumStakingPeriod(uint256)": FunctionFragment;
    "updateNetworkDemand(address)": FunctionFragment;
    "updateProgramDuration(uint256)": FunctionFragment;
    "updateRebaseEngine(address)": FunctionFragment;
    "updateRewardFees(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableUnstaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableUnstaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endProgram",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendProgram",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProgramDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistributionPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxDAFI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumStakingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumStakingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkDemand",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProgramDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRebaseEngine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endProgram", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProgramDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributionPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxDAFI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumStakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProgramDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRebaseEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardFees",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "REWARD_DISBURSED(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "STAKED(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UNSTAKED(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "REWARD_DISBURSED"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "STAKED"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UNSTAKED"): EventFragment;
}

export class StakingManagerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingManagerV1Interface;

  functions: {
    claimRewards(
      partialClaim: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endProgram(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendProgram(
      _newDurationInDays: BigNumberish,
      _maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProgramDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _database: string,
      _rebaseEngine: string,
      _networkDemand: string,
      _distributionPool: string,
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDistributionPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxDAFI(
      maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinimumStakingAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinimumStakingPeriod(
      noOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNetworkDemand(
      _networkDemand: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProgramDuration(
      _newDurationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRebaseEngine(
      _rebaseEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardFees(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    partialClaim: boolean,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableUnstaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableUnstaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endProgram(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendProgram(
    _newDurationInDays: BigNumberish,
    _maxDAFI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _database: string,
    _rebaseEngine: string,
    _networkDemand: string,
    _distributionPool: string,
    _minimumStakeDays: BigNumberish,
    _minimumStakeAmount: BigNumberish,
    _maxDAFI: BigNumberish,
    _rewardFee: BigNumberish,
    durationInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDistributionPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxDAFI(
    maxDAFI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinimumStakingAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinimumStakingPeriod(
    noOfDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNetworkDemand(
    _networkDemand: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProgramDuration(
    _newDurationInDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRebaseEngine(
    _rebaseEngine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardFees(
    newPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      partialClaim: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableStaking(overrides?: CallOverrides): Promise<void>;

    disableUnstaking(overrides?: CallOverrides): Promise<void>;

    enableStaking(overrides?: CallOverrides): Promise<void>;

    enableUnstaking(overrides?: CallOverrides): Promise<void>;

    endProgram(overrides?: CallOverrides): Promise<void>;

    extendProgram(
      _newDurationInDays: BigNumberish,
      _maxDAFI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _database: string,
      _rebaseEngine: string,
      _networkDemand: string,
      _distributionPool: string,
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateDistributionPool(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxDAFI(
      maxDAFI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumStakingAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumStakingPeriod(
      noOfDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkDemand(
      _networkDemand: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProgramDuration(
      _newDurationInDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRebaseEngine(
      _rebaseEngine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardFees(
      newPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    REWARD_DISBURSED(
      user?: null,
      amount?: null,
      timestamp?: null,
      currentlStakedAmount?: null,
      lastAccumulatedPoolWeight?: null,
      totalUnclaimed?: null,
      lastDemandFactor?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        currentlStakedAmount: BigNumber;
        lastAccumulatedPoolWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;

    STAKED(
      user?: null,
      amount?: null,
      timestamp?: null,
      currentlStakedAmount?: null,
      lastAccumulatedPoolWeight?: null,
      totalUnclaimed?: null,
      lastDemandFactor?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        currentlStakedAmount: BigNumber;
        lastAccumulatedPoolWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;

    UNSTAKED(
      user?: null,
      amount?: null,
      timestamp?: null,
      currentlStakedAmount?: null,
      lastAccumulatedPoolWeight?: null,
      totalUnclaimed?: null,
      lastDemandFactor?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        currentlStakedAmount: BigNumber;
        lastAccumulatedPoolWeight: BigNumber;
        totalUnclaimed: BigNumber;
        lastDemandFactor: BigNumber;
      }
    >;
  };

  estimateGas: {
    claimRewards(
      partialClaim: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endProgram(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendProgram(
      _newDurationInDays: BigNumberish,
      _maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProgramDuration(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _database: string,
      _rebaseEngine: string,
      _networkDemand: string,
      _distributionPool: string,
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDistributionPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxDAFI(
      maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinimumStakingAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinimumStakingPeriod(
      noOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNetworkDemand(
      _networkDemand: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProgramDuration(
      _newDurationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRebaseEngine(
      _rebaseEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardFees(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      partialClaim: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableUnstaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endProgram(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendProgram(
      _newDurationInDays: BigNumberish,
      _maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProgramDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _database: string,
      _rebaseEngine: string,
      _networkDemand: string,
      _distributionPool: string,
      _minimumStakeDays: BigNumberish,
      _minimumStakeAmount: BigNumberish,
      _maxDAFI: BigNumberish,
      _rewardFee: BigNumberish,
      durationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDistributionPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxDAFI(
      maxDAFI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinimumStakingAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinimumStakingPeriod(
      noOfDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNetworkDemand(
      _networkDemand: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProgramDuration(
      _newDurationInDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRebaseEngine(
      _rebaseEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardFees(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
