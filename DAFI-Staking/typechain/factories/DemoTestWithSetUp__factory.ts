/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DemoTestWithSetUp,
  DemoTestWithSetUpInterface,
} from "../DemoTestWithSetUp";

const _abi = [
  {
    inputs: [],
    name: "setUp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test_pass",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604e80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630a9254e41460375780638ab68152146037575b600080fd5b603d603f565b005b56fea164736f6c6343000800000a";

export class DemoTestWithSetUp__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DemoTestWithSetUp> {
    return super.deploy(overrides || {}) as Promise<DemoTestWithSetUp>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DemoTestWithSetUp {
    return super.attach(address) as DemoTestWithSetUp;
  }
  connect(signer: Signer): DemoTestWithSetUp__factory {
    return super.connect(signer) as DemoTestWithSetUp__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DemoTestWithSetUpInterface {
    return new utils.Interface(_abi) as DemoTestWithSetUpInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DemoTestWithSetUp {
    return new Contract(address, _abi, signerOrProvider) as DemoTestWithSetUp;
  }
}
