/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PriceFeeds, PriceFeedsInterface } from "../PriceFeeds";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregator",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getThePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161020d38038061020d83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c61017e61008f60003960006053015261017e6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c3c9a5514610030575b600080fd5b61003861004e565b6040516100459190610168565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100b757600080fd5b505afa1580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef9190610119565b509194505050505090565b805169ffffffffffffffffffff8116811461011457600080fd5b919050565b600080600080600060a08688031215610130578081fd5b610139866100fa565b945060208601519350604086015192506060860151915061015c608087016100fa565b90509295509295909350565b9081526020019056fea164736f6c6343000800000a";

export class PriceFeeds__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceFeeds> {
    return super.deploy(aggregator, overrides || {}) as Promise<PriceFeeds>;
  }
  getDeployTransaction(
    aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(aggregator, overrides || {});
  }
  attach(address: string): PriceFeeds {
    return super.attach(address) as PriceFeeds;
  }
  connect(signer: Signer): PriceFeeds__factory {
    return super.connect(signer) as PriceFeeds__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceFeedsInterface {
    return new utils.Interface(_abi) as PriceFeedsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceFeeds {
    return new Contract(address, _abi, signerOrProvider) as PriceFeeds;
  }
}
