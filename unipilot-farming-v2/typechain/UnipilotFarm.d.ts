/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UnipilotFarmInterface extends ethers.utils.Interface {
  functions: {
    "blacklistVaults(address[])": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "currentReward(address,address)": FunctionFragment;
    "emergencyUnstakeLp(address)": FunctionFragment;
    "farmingGrowthBlockLimit()": FunctionFragment;
    "governance()": FunctionFragment;
    "initializer(address[],uint256[],uint8[],address[])": FunctionFragment;
    "migrateFunds(address,address,uint256)": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "setStake(address)": FunctionFragment;
    "stakeLp(address,uint256)": FunctionFragment;
    "toggleBooster(address,address)": FunctionFragment;
    "unstakeLp(address,uint256)": FunctionFragment;
    "updateAltMultiplier(address,uint256)": FunctionFragment;
    "updateFarmingLimit(uint256)": FunctionFragment;
    "updateGovernance(address)": FunctionFragment;
    "updateMultiplier(address,uint256)": FunctionFragment;
    "updateRewardPerBlock(uint256)": FunctionFragment;
    "updateRewardType(address,uint8,address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "vaultAltInfo(address)": FunctionFragment;
    "vaultInfo(address)": FunctionFragment;
    "vaultListed()": FunctionFragment;
    "vaultWhitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blacklistVaults",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "claimReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnstakeLp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingGrowthBlockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializer",
    values: [string[], BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeLp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBooster",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeLp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAltMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarmingLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardType",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAltInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaultListed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWhitelist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "blacklistVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnstakeLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingGrowthBlockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAltMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFarmingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultAltInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "FarmingStatus(bool,bool)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
    "MigrateFunds(address,address,uint256)": EventFragment;
    "Multiplier(address,address,uint256,uint256)": EventFragment;
    "Reward(address,address,address,uint256)": EventFragment;
    "RewardPerBlock(uint256,uint256)": EventFragment;
    "RewardStatus(address,uint8,uint8,address)": EventFragment;
    "Stake(address,address)": EventFragment;
    "ToggleBooster(address,address,bool,bool)": EventFragment;
    "UpdateFarmingLimit(uint256,uint256)": EventFragment;
    "Vault(address,uint256,uint256,uint256,uint8,address)": EventFragment;
    "VaultWhitelistStatus(address,bool)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmingStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Multiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggleBooster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFarmingLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultWhitelistStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    user: string;
    vault: string;
    amount: BigNumber;
    totalLpLocked: BigNumber;
  }
>;

export type FarmingStatusEvent = TypedEvent<
  [boolean, boolean] & { old: boolean; updated: boolean }
>;

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string] & { old: string; updated: string }
>;

export type MigrateFundsEvent = TypedEvent<
  [string, string, BigNumber] & {
    newContract: string;
    _tokenAddress: string;
    _amount: BigNumber;
  }
>;

export type MultiplierEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    vault: string;
    token: string;
    old: BigNumber;
    updated: BigNumber;
  }
>;

export type RewardEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    token: string;
    user: string;
    vault: string;
    reward: BigNumber;
  }
>;

export type RewardPerBlockEvent = TypedEvent<
  [BigNumber, BigNumber] & { old: BigNumber; updated: BigNumber }
>;

export type RewardStatusEvent = TypedEvent<
  [string, number, number, string] & {
    vault: string;
    old: number;
    updated: number;
    altToken: string;
  }
>;

export type StakeEvent = TypedEvent<
  [string, string] & { old: string; updated: string }
>;

export type ToggleBoosterEvent = TypedEvent<
  [string, string, boolean, boolean] & {
    userAddress: string;
    vaultAddress: string;
    old: boolean;
    updated: boolean;
  }
>;

export type UpdateFarmingLimitEvent = TypedEvent<
  [BigNumber, BigNumber] & { old: BigNumber; updated: BigNumber }
>;

export type VaultEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, string] & {
    vault: string;
    rewardPerBlock: BigNumber;
    multiplier: BigNumber;
    lastRewardBlock: BigNumber;
    rewardType: number;
    rewardToken: string;
  }
>;

export type VaultWhitelistStatusEvent = TypedEvent<
  [string, boolean] & { _vault: string; status: boolean }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    vault: string;
    amount: BigNumber;
  }
>;

export class UnipilotFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UnipilotFarmInterface;

  functions: {
    blacklistVaults(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentReward(
      _vault: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber;
        altReward: BigNumber;
        gr: BigNumber;
        altGr: BigNumber;
      }
    >;

    emergencyUnstakeLp(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initializer(
      _vault: string[],
      _multiplier: BigNumberish[],
      _rewardType: BigNumberish[],
      _rewardToken: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateFunds(
      _receiver: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleBooster(
      _vault: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAltMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardType(
      _vault: string,
      _rewardType: BigNumberish,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        reward: BigNumber;
        altReward: BigNumber;
        lpLiquidity: BigNumber;
        vault: string;
        boosterActive: boolean;
      }
    >;

    vaultAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardToken: string;
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    vaultInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        startBlock: BigNumber;
        lastRewardBlock: BigNumber;
        globalReward: BigNumber;
        totalLpLocked: BigNumber;
        multiplier: BigNumber;
        stakingToken: string;
        reward: number;
      }
    >;

    vaultListed(overrides?: CallOverrides): Promise<[string[]]>;

    vaultWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  blacklistVaults(
    _vaults: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentReward(
    _vault: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      reward: BigNumber;
      altReward: BigNumber;
      gr: BigNumber;
      altGr: BigNumber;
    }
  >;

  emergencyUnstakeLp(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initializer(
    _vault: string[],
    _multiplier: BigNumberish[],
    _rewardType: BigNumberish[],
    _rewardToken: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateFunds(
    _receiver: string,
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setStake(
    _stakeContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLp(
    _vault: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleBooster(
    _vault: string,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeLp(
    _vault: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAltMultiplier(
    _vault: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFarmingLimit(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGovernance(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMultiplier(
    _vault: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardPerBlock(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardType(
    _vault: string,
    _rewardType: BigNumberish,
    _altToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      reward: BigNumber;
      altReward: BigNumber;
      lpLiquidity: BigNumber;
      vault: string;
      boosterActive: boolean;
    }
  >;

  vaultAltInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardToken: string;
      startBlock: BigNumber;
      globalReward: BigNumber;
      lastRewardBlock: BigNumber;
      multiplier: BigNumber;
    }
  >;

  vaultInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, number] & {
      startBlock: BigNumber;
      lastRewardBlock: BigNumber;
      globalReward: BigNumber;
      totalLpLocked: BigNumber;
      multiplier: BigNumber;
      stakingToken: string;
      reward: number;
    }
  >;

  vaultListed(overrides?: CallOverrides): Promise<string[]>;

  vaultWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    blacklistVaults(
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber;
        altReward: BigNumber;
        gr: BigNumber;
        altGr: BigNumber;
      }
    >;

    currentReward(
      _vault: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber;
        altReward: BigNumber;
        gr: BigNumber;
        altGr: BigNumber;
      }
    >;

    emergencyUnstakeLp(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initializer(
      _vault: string[],
      _multiplier: BigNumberish[],
      _rewardType: BigNumberish[],
      _rewardToken: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    migrateFunds(
      _receiver: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setStake(_stakeContract: string, overrides?: CallOverrides): Promise<void>;

    stakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleBooster(
      _vault: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAltMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGovernance(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPerBlock(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardType(
      _vault: string,
      _rewardType: BigNumberish,
      _altToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        reward: BigNumber;
        altReward: BigNumber;
        lpLiquidity: BigNumber;
        vault: string;
        boosterActive: boolean;
      }
    >;

    vaultAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardToken: string;
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    vaultInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        startBlock: BigNumber;
        lastRewardBlock: BigNumber;
        globalReward: BigNumber;
        totalLpLocked: BigNumber;
        multiplier: BigNumber;
        stakingToken: string;
        reward: number;
      }
    >;

    vaultListed(overrides?: CallOverrides): Promise<string[]>;

    vaultWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Deposit(address,address,uint256,uint256)"(
      user?: null,
      vault?: null,
      amount?: null,
      totalLpLocked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        vault: string;
        amount: BigNumber;
        totalLpLocked: BigNumber;
      }
    >;

    Deposit(
      user?: null,
      vault?: null,
      amount?: null,
      totalLpLocked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        vault: string;
        amount: BigNumber;
        totalLpLocked: BigNumber;
      }
    >;

    "FarmingStatus(bool,bool)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[boolean, boolean], { old: boolean; updated: boolean }>;

    FarmingStatus(
      old?: null,
      updated?: null
    ): TypedEventFilter<[boolean, boolean], { old: boolean; updated: boolean }>;

    "GovernanceUpdated(address,address)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    GovernanceUpdated(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    "MigrateFunds(address,address,uint256)"(
      newContract?: null,
      _tokenAddress?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { newContract: string; _tokenAddress: string; _amount: BigNumber }
    >;

    MigrateFunds(
      newContract?: null,
      _tokenAddress?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { newContract: string; _tokenAddress: string; _amount: BigNumber }
    >;

    "Multiplier(address,address,uint256,uint256)"(
      vault?: null,
      token?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { vault: string; token: string; old: BigNumber; updated: BigNumber }
    >;

    Multiplier(
      vault?: null,
      token?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { vault: string; token: string; old: BigNumber; updated: BigNumber }
    >;

    "Reward(address,address,address,uint256)"(
      token?: null,
      user?: null,
      vault?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; user: string; vault: string; reward: BigNumber }
    >;

    Reward(
      token?: null,
      user?: null,
      vault?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; user: string; vault: string; reward: BigNumber }
    >;

    "RewardPerBlock(uint256,uint256)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    RewardPerBlock(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    "RewardStatus(address,uint8,uint8,address)"(
      vault?: null,
      old?: null,
      updated?: null,
      altToken?: null
    ): TypedEventFilter<
      [string, number, number, string],
      { vault: string; old: number; updated: number; altToken: string }
    >;

    RewardStatus(
      vault?: null,
      old?: null,
      updated?: null,
      altToken?: null
    ): TypedEventFilter<
      [string, number, number, string],
      { vault: string; old: number; updated: number; altToken: string }
    >;

    "Stake(address,address)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    Stake(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    "ToggleBooster(address,address,bool,bool)"(
      userAddress?: null,
      vaultAddress?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean],
      {
        userAddress: string;
        vaultAddress: string;
        old: boolean;
        updated: boolean;
      }
    >;

    ToggleBooster(
      userAddress?: null,
      vaultAddress?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean],
      {
        userAddress: string;
        vaultAddress: string;
        old: boolean;
        updated: boolean;
      }
    >;

    "UpdateFarmingLimit(uint256,uint256)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    UpdateFarmingLimit(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    "Vault(address,uint256,uint256,uint256,uint8,address)"(
      vault?: null,
      rewardPerBlock?: null,
      multiplier?: null,
      lastRewardBlock?: null,
      rewardType?: null,
      rewardToken?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, string],
      {
        vault: string;
        rewardPerBlock: BigNumber;
        multiplier: BigNumber;
        lastRewardBlock: BigNumber;
        rewardType: number;
        rewardToken: string;
      }
    >;

    Vault(
      vault?: null,
      rewardPerBlock?: null,
      multiplier?: null,
      lastRewardBlock?: null,
      rewardType?: null,
      rewardToken?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, number, string],
      {
        vault: string;
        rewardPerBlock: BigNumber;
        multiplier: BigNumber;
        lastRewardBlock: BigNumber;
        rewardType: number;
        rewardToken: string;
      }
    >;

    "VaultWhitelistStatus(address,bool)"(
      _vault?: string | null,
      status?: null
    ): TypedEventFilter<[string, boolean], { _vault: string; status: boolean }>;

    VaultWhitelistStatus(
      _vault?: string | null,
      status?: null
    ): TypedEventFilter<[string, boolean], { _vault: string; status: boolean }>;

    "Withdraw(address,address,uint256)"(
      user?: null,
      vault?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; vault: string; amount: BigNumber }
    >;

    Withdraw(
      user?: null,
      vault?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; vault: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    blacklistVaults(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentReward(
      _vault: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyUnstakeLp(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initializer(
      _vault: string[],
      _multiplier: BigNumberish[],
      _rewardType: BigNumberish[],
      _rewardToken: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateFunds(
      _receiver: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleBooster(
      _vault: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAltMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardType(
      _vault: string,
      _rewardType: BigNumberish,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultAltInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultListed(overrides?: CallOverrides): Promise<BigNumber>;

    vaultWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklistVaults(
      _vaults: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentReward(
      _vault: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyUnstakeLp(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingGrowthBlockLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializer(
      _vault: string[],
      _multiplier: BigNumberish[],
      _rewardType: BigNumberish[],
      _rewardToken: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateFunds(
      _receiver: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleBooster(
      _vault: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeLp(
      _vault: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAltMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      _vault: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardType(
      _vault: string,
      _rewardType: BigNumberish,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultListed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
