/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IULMEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Collect(uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Deposited(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolCreated(address,address,address,uint24,uint160)": EventFragment;
    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolReajusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type CollectEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  {
    tokenId: BigNumber;
    userAmount0: BigNumber;
    userAmount1: BigNumber;
    pilotAmount: BigNumber;
    pool: string;
    recipient: string;
  }
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    pool: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    liquidity: BigNumber;
  }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type PoolCreatedEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  {
    token0: string;
    token1: string;
    pool: string;
    fee: number;
    sqrtPriceX96: BigNumber;
  }
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export type PoolReajustedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, number, number, number],
  {
    pool: string;
    baseLiquidity: BigNumber;
    rangeLiquidity: BigNumber;
    newBaseTickLower: number;
    newBaseTickUpper: number;
    newRangeTickLower: number;
    newRangeTickUpper: number;
  }
>;

export type PoolReajustedEventFilter = TypedEventFilter<PoolReajustedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    pool: string;
    recipient: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IULMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IULMEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Collect(uint256,uint256,uint256,uint256,address,address)"(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): CollectEventFilter;
    Collect(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): CollectEventFilter;

    "Deposited(address,uint256,uint256,uint256,uint256)"(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): DepositedEventFilter;
    Deposited(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): DepositedEventFilter;

    "PoolCreated(address,address,address,uint24,uint160)"(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): PoolCreatedEventFilter;

    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)"(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): PoolReajustedEventFilter;
    PoolReajusted(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): PoolReajustedEventFilter;

    "Withdrawn(address,address,uint256,uint256,uint256)"(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
