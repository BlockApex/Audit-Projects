/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DepositParamsStruct = {
  recipient: string;
  exchangeManagerAddress: string;
  token0: string;
  token1: string;
  amount0Desired: BigNumberish;
  amount1Desired: BigNumberish;
  tokenId: BigNumberish;
};

export type DepositParamsStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  recipient: string;
  exchangeManagerAddress: string;
  token0: string;
  token1: string;
  amount0Desired: BigNumber;
  amount1Desired: BigNumber;
  tokenId: BigNumber;
};

export type WithdrawParamsStruct = {
  pilotToken: boolean;
  wethToken: boolean;
  exchangeManagerAddress: string;
  liquidity: BigNumberish;
  tokenId: BigNumberish;
};

export type WithdrawParamsStructOutput = [
  boolean,
  boolean,
  string,
  BigNumber,
  BigNumber
] & {
  pilotToken: boolean;
  wethToken: boolean;
  exchangeManagerAddress: string;
  liquidity: BigNumber;
  tokenId: BigNumber;
};

export interface IUnipilotInterface extends utils.Interface {
  functions: {
    "createPoolAndDeposit((address,address,address,address,uint256,uint256,uint256),bytes[2])": FunctionFragment;
    "deposit((address,address,address,address,uint256,uint256,uint256),bytes)": FunctionFragment;
    "exchangeManagerWhitelist(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "mintPilot(address,uint256)": FunctionFragment;
    "mintProxy()": FunctionFragment;
    "withdraw((bool,bool,address,uint256,uint256),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPoolAndDeposit",
    values: [DepositParamsStruct, [BytesLike, BytesLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeManagerWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPilot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPoolAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeManagerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPilot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ExchangeStatus(address,bool)": EventFragment;
    "ExchangeWhitelisted(address)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
}

export type ExchangeStatusEvent = TypedEvent<
  [string, boolean],
  { exchange: string; status: boolean }
>;

export type ExchangeStatusEventFilter = TypedEventFilter<ExchangeStatusEvent>;

export type ExchangeWhitelistedEvent = TypedEvent<
  [string],
  { newExchange: string }
>;

export type ExchangeWhitelistedEventFilter =
  TypedEventFilter<ExchangeWhitelistedEvent>;

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string],
  { oldGovernance: string; newGovernance: string }
>;

export type GovernanceUpdatedEventFilter =
  TypedEventFilter<GovernanceUpdatedEvent>;

export interface IUnipilot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUnipilotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPoolAndDeposit(
      params: DepositParamsStruct,
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      params: DepositParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintProxy(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      params: WithdrawParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createPoolAndDeposit(
    params: DepositParamsStruct,
    data: [BytesLike, BytesLike],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    params: DepositParamsStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeManagerWhitelist(
    exchange: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governance(overrides?: CallOverrides): Promise<string>;

  mintPilot(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintProxy(overrides?: CallOverrides): Promise<string>;

  withdraw(
    params: WithdrawParamsStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPoolAndDeposit(
      params: DepositParamsStruct,
      data: [BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0Added: BigNumber;
        amount1Added: BigNumber;
        mintedTokenId: BigNumber;
      }
    >;

    deposit(
      params: DepositParamsStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Added: BigNumber;
        amount1Added: BigNumber;
      }
    >;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governance(overrides?: CallOverrides): Promise<string>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintProxy(overrides?: CallOverrides): Promise<string>;

    withdraw(
      params: WithdrawParamsStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeStatus(address,bool)"(
      exchange?: null,
      status?: null
    ): ExchangeStatusEventFilter;
    ExchangeStatus(exchange?: null, status?: null): ExchangeStatusEventFilter;

    "ExchangeWhitelisted(address)"(
      newExchange?: null
    ): ExchangeWhitelistedEventFilter;
    ExchangeWhitelisted(newExchange?: null): ExchangeWhitelistedEventFilter;

    "GovernanceUpdated(address,address)"(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpdatedEventFilter;
    GovernanceUpdated(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpdatedEventFilter;
  };

  estimateGas: {
    createPoolAndDeposit(
      params: DepositParamsStruct,
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintProxy(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPoolAndDeposit(
      params: DepositParamsStruct,
      data: [BytesLike, BytesLike],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      params: DepositParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeManagerWhitelist(
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPilot(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
