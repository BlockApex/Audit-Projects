/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultInterface extends utils.Interface {
  functions: {
    "deposit(uint256,uint256,address)": FunctionFragment;
    "getTotalAmounts()": FunctionFragment;
    "rebalance(int24,int24,int24,int24,address,int256)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,uint256,uint256,uint256)": EventFragment;
    "Rebalance(int24,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    to: string;
    shares: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type RebalanceEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    tick: number;
    totalAmount0: BigNumber;
    totalAmount1: BigNumber;
    feeAmount0: BigNumber;
    feeAmount1: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    to: string;
    shares: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalAmounts(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rebalance(
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      feeRecipient: string,
      swapQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalAmounts(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  rebalance(
    _baseLower: BigNumberish,
    _baseUpper: BigNumberish,
    _limitLower: BigNumberish,
    _limitUpper: BigNumberish,
    feeRecipient: string,
    swapQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAmounts(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rebalance(
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      feeRecipient: string,
      swapQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    "Deposit(address,address,uint256,uint256,uint256)"(
      sender?: string | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): DepositEventFilter;

    "Rebalance(int24,uint256,uint256,uint256,uint256,uint256)"(
      tick?: null,
      totalAmount0?: null,
      totalAmount1?: null,
      feeAmount0?: null,
      feeAmount1?: null,
      totalSupply?: null
    ): RebalanceEventFilter;
    Rebalance(
      tick?: null,
      totalAmount0?: null,
      totalAmount1?: null,
      feeAmount0?: null,
      feeAmount1?: null,
      totalSupply?: null
    ): RebalanceEventFilter;

    "Withdraw(address,address,uint256,uint256,uint256)"(
      sender?: string | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      feeRecipient: string,
      swapQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      feeRecipient: string,
      swapQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
