/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UnipilotTokenProxyInterface extends utils.Interface {
  functions: {
    "mint(address,uint256)": FunctionFragment;
    "minter(address)": FunctionFragment;
    "timelock()": FunctionFragment;
    "updateMinter(address)": FunctionFragment;
    "updateTimelock(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values: [string]): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimelock",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimelock",
    data: BytesLike
  ): Result;

  events: {
    "MinterUpdated(address,bool)": EventFragment;
    "TimelockUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockUpdated"): EventFragment;
}

export type MinterUpdatedEvent = TypedEvent<
  [string, boolean],
  { minter: string; status: boolean }
>;

export type MinterUpdatedEventFilter = TypedEventFilter<MinterUpdatedEvent>;

export type TimelockUpdatedEvent = TypedEvent<
  [string, string],
  { previousTimelock: string; newTimelock: string }
>;

export type TimelockUpdatedEventFilter = TypedEventFilter<TimelockUpdatedEvent>;

export interface UnipilotTokenProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UnipilotTokenProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    updateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mint(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<string>;

  updateMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTimelock(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<string>;

    updateMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    updateTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MinterUpdated(address,bool)"(
      minter?: null,
      status?: null
    ): MinterUpdatedEventFilter;
    MinterUpdated(minter?: null, status?: null): MinterUpdatedEventFilter;

    "TimelockUpdated(address,address)"(
      previousTimelock?: null,
      newTimelock?: null
    ): TimelockUpdatedEventFilter;
    TimelockUpdated(
      previousTimelock?: null,
      newTimelock?: null
    ): TimelockUpdatedEventFilter;
  };

  estimateGas: {
    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
