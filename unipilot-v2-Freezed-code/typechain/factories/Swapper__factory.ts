/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Swapper, SwapperInterface } from "../Swapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_fee",
        type: "uint24",
      },
    ],
    name: "swapExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161065238038061065283398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6105ba6100986000398060b3528061013352806101c652506105ba6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063089fe6aa14610046578063bd13338c14610064578063c31c9c0714610084575b600080fd5b61004e610099565b60405161005b9190610594565b60405180910390f35b6100776100723660046104c2565b61009f565b60405161005b91906105a4565b61008c6101c4565b60405161005b9190610517565b610bb881565b60006100ad843330886101e8565b6100d8847f000000000000000000000000000000000000000000000000000000000000000087610340565b60408051610100810182526001600160a01b038087168252858116602083015262ffffff85168284015233606083015242608083015260a08201889052600060c0830181905260e0830152915163414bf38960e01b815290917f0000000000000000000000000000000000000000000000000000000000000000169063414bf3899061016890849060040161052b565b602060405180830381600087803b15801561018257600080fd5b505af1158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba91906104aa565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b6020831061026c5780518252601f19909201916020918201910161024d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146102ce576040519150601f19603f3d011682016040523d82523d6000602084013e6102d3565b606091505b509150915081801561030157508051158061030157508080602001905160208110156102fe57600080fd5b50515b610338576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106103bc5780518252601f19909201916020918201910161039d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461041e576040519150601f19603f3d011682016040523d82523d6000602084013e610423565b606091505b5091509150818015610451575080511580610451575080806020019051602081101561044e57600080fd5b50515b610487576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b80356001600160a01b03811681146104a557600080fd5b919050565b6000602082840312156104bb578081fd5b5051919050565b600080600080608085870312156104d7578283fd5b843593506104e76020860161048e565b92506104f56040860161048e565b9150606085013562ffffff8116811461050c578182fd5b939692955090935050565b6001600160a01b0391909116815260200190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b62ffffff91909116815260200190565b9081526020019056fea164736f6c6343000706000a";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Swapper> {
    return super.deploy(_swapRouter, overrides || {}) as Promise<Swapper>;
  }
  getDeployTransaction(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_swapRouter, overrides || {});
  }
  attach(address: string): Swapper {
    return super.attach(address) as Swapper;
  }
  connect(signer: Signer): Swapper__factory {
    return super.connect(signer) as Swapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new utils.Interface(_abi) as SwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Swapper {
    return new Contract(address, _abi, signerOrProvider) as Swapper;
  }
}
