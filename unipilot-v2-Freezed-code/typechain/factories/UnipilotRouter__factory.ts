/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UnipilotRouter,
  UnipilotRouterInterface,
} from "../UnipilotRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040516078380380607883398181016040526020811015602f57600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055601980605f6000396000f3fe608060405236600a57005b00fea164736f6c6343000706000a";

type UnipilotRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UnipilotRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UnipilotRouter__factory extends ContractFactory {
  constructor(...args: UnipilotRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UnipilotRouter> {
    return super.deploy(
      _governance,
      overrides || {}
    ) as Promise<UnipilotRouter>;
  }
  getDeployTransaction(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_governance, overrides || {});
  }
  attach(address: string): UnipilotRouter {
    return super.attach(address) as UnipilotRouter;
  }
  connect(signer: Signer): UnipilotRouter__factory {
    return super.connect(signer) as UnipilotRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UnipilotRouterInterface {
    return new utils.Interface(_abi) as UnipilotRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UnipilotRouter {
    return new Contract(address, _abi, signerOrProvider) as UnipilotRouter;
  }
}
